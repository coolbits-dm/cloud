// app/api/chat/route.ts
import { NextResponse } from "next/server";
import OpenAI from "openai";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

function ok(data: any) {
  return NextResponse.json({ success: true, data }, { status: 200 });
}
function fail(message: string, extra?: any) {
  // păstrăm 200 ca frontend-ul să nu arunce 503; afișăm mesaj util
  return NextResponse.json({ success: false, message, extra }, { status: 200 });
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { message, context = [] } = body || {};
    const userText = String(message ?? "");

    const systemPrompt =
      "You are a concise, friendly digital marketing assistant. " +
      "Keep replies short and practical. " +
      "Gently steer the user to provide: website/brand, goals (leads/sales/awareness/traffic), " +
      "channels (Google Ads/SEO/Email/Social), and tools (GA4/GTM/GSC). " +
      "If the user goes off-topic, bring them back politely.";

    // 1) OpenAI dacă există cheie
    if (process.env.OPENAI_API_KEY) {
      const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
      const model = process.env.MODEL_OPENAI || "gpt-4o-mini";

      const messages = [
        { role: "system", content: systemPrompt },
        ...context.map((m: any) => ({ role: m.role, content: m.content })),
        { role: "user", content: userText },
      ];

      const resp = await openai.chat.completions.create({
        model,
        messages,
        temperature: 0.4,
      });

      const text = resp.choices?.[0]?.message?.content?.trim() || "I'm here.";
      return ok({ message: text, usage: resp.usage ?? null });
    }

    // 2) altfel xAI dacă există cheie
    if (process.env.XAI_API_KEY) {
      const model = process.env.MODEL_XAI || "grok-2-mini";
      const messages = [
        { role: "system", content: systemPrompt },
        ...context.map((m: any) => ({ role: m.role, content: m.content })),
        { role: "user", content: userText },
      ];

      const resp = await fetch("https://api.x.ai/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.XAI_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ model, messages, temperature: 0.4 }),
      });

      if (!resp.ok) {
        const txt = await resp.text();
        throw new Error(`xAI HTTP ${resp.status}: ${txt}`);
      }
      const data = await resp.json();
      const text = data?.choices?.[0]?.message?.content?.trim() || "Here.";
      return ok({ message: text, usage: data?.usage ?? null });
    }

    // 3) Mod DEMO (fără chei)
    const demo =
      "Salut! (mod demo — fără chei API)\n" +
      "Spune-mi website-ul (ex: https://exemplu.ro), obiectivele (lead-uri/vânzări/awareness/traffic) " +
      "și canalele folosite (Google Ads/SEO/Email/GA4). În dreapta se construiește Business Map-ul.";
    return ok({ message: demo, usage: null });
  } catch (err: any) {
    console.error("CHAT route error:", err);
    return fail(err?.message || "Server error");
  }
}
