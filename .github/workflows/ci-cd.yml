# CoolBits.ai GitHub Actions CI/CD Pipeline
# M8.4 - PII Scan in CI (Obligatory)

name: CoolBits.ai CI/CD Pipeline

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'panel/**'
      - 'artifacts/**'
      - 'report/**'
      - '**/*.md'
      - '**/*.MD'
  push:
    branches: [ main ]
    paths-ignore:
      - 'panel/**'
      - 'artifacts/**'
      - 'report/**'
      - '**/*.md'
      - '**/*.MD'

env:
  CB_BILLING_MODE: dev

jobs:
  verify:
    # rulează pe PR și pe push când NU e prod
    if: ${{ github.event_name == 'pull_request' || env.CB_BILLING_MODE != 'prod' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci || true
      - run: npm run lint --if-present || true
      - run: npm test --if-present || true
      - name: actionlint
        uses: reviewdog/action-actionlint@v1

  release:
    # DOAR pe push + prod
    if: ${{ github.event_name == 'push' && env.CB_BILLING_MODE == 'prod' }}
    needs: [verify]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Billing guard
        run: bash scripts/billing_guard.sh
      - name: GCP Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--no-git --source . --redact --report-format sarif --report-path gitleaks.sarif"

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gitleaks.sarif

      - name: Fail on PII detection
        run: |
          if [ -f gitleaks.sarif ]; then
            if grep -q '"level":"error"' gitleaks.sarif; then
              echo "❌ PII detected in code!"
              exit 1
            else
              echo "✅ No PII detected"
            fi
          fi

  # M9.1 - Secret Scanning
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog
        run: |
          pipx install trufflehog
          trufflehog filesystem --fail . --format json --output trufflehog.json

      - name: Check TruffleHog results
        run: |
          if [ -f trufflehog.json ]; then
            if [ -s trufflehog.json ]; then
              echo "❌ Secrets detected!"
              cat trufflehog.json
              exit 1
            else
              echo "✅ No secrets detected"
            fi
          fi

  # M9.3 - Policy-as-Code
  policy-check:
    name: Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.45.0/conftest_0.45.0_Linux_x86_64.tar.gz
          tar xzf conftest_0.45.0_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/

      - name: Run Conftest
        run: conftest test k8s/ -p policy/rego

  # M9.4 - CVE Scan
  cve-scan:
    name: CVE Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run CVE scan
        run: |
          bash scripts/cve_scan.sh ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Check CVE results
        run: |
          if [ -f cve_fail.flag ]; then
            echo "❌ CVE scan failed - HIGH/CRITICAL vulnerabilities found"
            exit 1
          else
            echo "✅ CVE scan passed"
          fi

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy

      - name: Run Black
        run: black --check .

      - name: Run Flake8
        run: flake8 .

      - name: Run MyPy
        run: mypy .

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit
        run: bandit -r . -f json -o bandit-report.json

      - name: Run Safety
        run: safety check --json --output safety-report.json

      - name: Check security results
        run: |
          if [ -f bandit-report.json ]; then
            if grep -q '"issue_severity":"HIGH"' bandit-report.json; then
              echo "❌ High severity security issues found"
              exit 1
            fi
          fi

  # Build and Deploy
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [verify]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && env.CB_BILLING_MODE == 'prod' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        if: ${{ github.event_name != 'pull_request' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY || '' }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy coolbits-production \
            --image=${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --port=8501 \
            --memory=4Gi \
            --cpu=2 \
            --min-instances=2 \
            --max-instances=50 \
            --set-env-vars="OPIPE_ENV=production" \
            --project=${{ env.PROJECT_ID }}

      - name: Health Check
        run: |
          sleep 30
          curl -f https://coolbits.ai/_stcore/health || exit 1

  # M8.5 - CMEK/DPAPI Verification
  encryption-check:
    name: Encryption Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        if: ${{ github.event_name != 'pull_request' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY || '' }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Check backup bucket encryption
        run: |
          gcloud storage buckets describe gs://coolbits-backups-${{ env.PROJECT_ID }} --format="value(encryption.defaultKmsKeyName)"

      - name: Verify KMS key exists
        run: |
          gcloud kms keys list --keyring=coolbits-backup-keyring --location=${{ env.REGION }}

      - name: Test server without Secret Manager
        run: |
          # This should fail if secrets are not properly managed
          python -c "
          import os
          if not os.environ.get('GOOGLE_CLOUD_PROJECT'):
              print('❌ Server should refuse to start without proper configuration')
              exit(1)
          else:
              print('✅ Server configuration validated')
          "