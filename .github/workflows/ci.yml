name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # Python Linting and Type Checking
  python-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt
      
      - name: Run Black (code formatting check)
        run: black --check --diff .
      
      - name: Run isort (import sorting check)
        run: isort --check-only --diff .
      
      - name: Run Flake8 (linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run MyPy (type checking)
        run: mypy . --ignore-missing-imports || true

  # Node.js Linting and Type Checking
  node-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npx eslint . --ext .js,.ts,.jsx,.tsx || true
      
      - name: Run Prettier check
        run: npx prettier --check . || true

  # Python Unit Tests
  python-test:
    runs-on: ubuntu-latest
    needs: python-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -r requirements.txt
      
      - name: Run Python tests
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=html || true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: python
          name: python-coverage

  # Node.js Unit Tests
  node-test:
    runs-on: ubuntu-latest
    needs: node-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Jest tests
        run: npm test || true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: node
          name: node-coverage

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [python-test, node-test]
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "wget -q -O- http://localhost:6333/"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest playwright
          pip install -r requirements.txt
      
      - name: Install Node.js dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Start application
        run: |
          python -m streamlit run coolbits_web_app.py --server.port=8501 &
          sleep 10
      
      - name: Run E2E tests
        run: |
          pytest tests/e2e/ --browser chromium --browser webkit || true
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [python-test, node-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t coolbits-test:latest .
      
      - name: Test Docker image
        run: |
          docker run --rm -d --name coolbits-test -p 8501:8501 coolbits-test:latest
          sleep 30
          curl -f http://localhost:8501/_stcore/health || exit 1
          docker stop coolbits-test

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [python-test, node-test, e2e-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
